@using System.ComponentModel
@using System.Runtime.CompilerServices
@using PcpManagement.App.Common
@inherits LayoutComponentBase
@inject IsDarkModeService ThemeService

@* Required *@
<MudThemeProvider 
    @ref="@_mudThemeProvider" 
    @bind-IsDarkMode="@ThemeService.IsDarkMode"
    Theme="AppConfiguration.Theme"/>
<MudPopoverProvider />
@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudText Typo="Typo.h5" Class="mudblazor-appbar-brand-text d-none d-md-flex">PCP-RPA Management</MudText>
        <MudSpacer />
        
        <MudSwitch @bind-Value="ThemeService.IsDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Light/Dark Mode"/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader/>
        <NavMenu IsDarkMode="ThemeService.IsDarkMode"/>
    </MudDrawer>
    <MudMainContent>
            @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ThemeService.IsDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }
    
    private Task OnSystemPreferenceChanged(bool newValue)
    {
        ThemeService.IsDarkMode = newValue;
        ThemeService.PropertyChanged += OnPropertyChanged!;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private void OnPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        
        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        
    }
    
    public class IsDarkModeService : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] string? propertyMode = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyMode));
        }

        private bool _isDarkMode;

        public bool IsDarkMode
        {
            get => _isDarkMode;
            set  {
                _isDarkMode = value;
                OnPropertyChanged();
            }
        }
    }
}
